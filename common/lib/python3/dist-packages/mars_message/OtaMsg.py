"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class OtaMsg(object):
    __slots__ = ["moudle_type", "download_url"]

    __typenames__ = ["string", "string"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.moudle_type = ""
        self.download_url = ""

    def encode(self):
        buf = BytesIO()
        buf.write(OtaMsg._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __moudle_type_encoded = self.moudle_type.encode('utf-8')
        buf.write(struct.pack('>I', len(__moudle_type_encoded)+1))
        buf.write(__moudle_type_encoded)
        buf.write(b"\0")
        __download_url_encoded = self.download_url.encode('utf-8')
        buf.write(struct.pack('>I', len(__download_url_encoded)+1))
        buf.write(__download_url_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != OtaMsg._get_packed_fingerprint():
            raise ValueError("Decode error")
        return OtaMsg._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = OtaMsg()
        __moudle_type_len = struct.unpack('>I', buf.read(4))[0]
        self.moudle_type = buf.read(__moudle_type_len)[:-1].decode('utf-8', 'replace')
        __download_url_len = struct.unpack('>I', buf.read(4))[0]
        self.download_url = buf.read(__download_url_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if OtaMsg in parents: return 0
        tmphash = (0x3bc5d156db3be969) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if OtaMsg._packed_fingerprint is None:
            OtaMsg._packed_fingerprint = struct.pack(">Q", OtaMsg._get_hash_recursive([]))
        return OtaMsg._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", OtaMsg._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.moudle_type = j["moudle_type"]
        self.download_url = j["download_url"]

    def to_dict(self):
        j = {}
        j["moudle_type"] = self.moudle_type
        j["download_url"] = self.download_url
        return j

