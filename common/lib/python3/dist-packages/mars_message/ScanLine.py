"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class ScanLine(object):
    __slots__ = ["count", "angle", "rangeMM", "angleNearest", "rangeNearest"]

    __typenames__ = ["int16_t", "int8_t", "int8_t", "int8_t", "int8_t"]

    __dimensions__ = [None, ["count"], ["count"], None, None]

    def __init__(self):
        self.count = 0
        self.angle = []
        self.rangeMM = []
        self.angleNearest = 0
        self.rangeNearest = 0

    def encode(self):
        buf = BytesIO()
        buf.write(ScanLine._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">h", self.count))
        buf.write(struct.pack('>%db' % self.count, *self.angle[:self.count]))
        buf.write(struct.pack('>%db' % self.count, *self.rangeMM[:self.count]))
        buf.write(struct.pack(">bb", self.angleNearest, self.rangeNearest))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ScanLine._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ScanLine._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ScanLine()
        self.count = struct.unpack(">h", buf.read(2))[0]
        self.angle = struct.unpack('>%db' % self.count, buf.read(self.count))
        self.rangeMM = struct.unpack('>%db' % self.count, buf.read(self.count))
        self.angleNearest, self.rangeNearest = struct.unpack(">bb", buf.read(2))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if ScanLine in parents: return 0
        tmphash = (0x6514ca3a97c84c21) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ScanLine._packed_fingerprint is None:
            ScanLine._packed_fingerprint = struct.pack(">Q", ScanLine._get_hash_recursive([]))
        return ScanLine._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ScanLine._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.count = j["count"]
        self.angle = j["angle"]
        self.rangeMM = j["rangeMM"]
        self.angleNearest = j["angleNearest"]
        self.rangeNearest = j["rangeNearest"]

    def to_dict(self):
        j = {}
        j["count"] = self.count
        j["angle"] = self.angle
        j["rangeMM"] = self.rangeMM
        j["angleNearest"] = self.angleNearest
        j["rangeNearest"] = self.rangeNearest
        return j

