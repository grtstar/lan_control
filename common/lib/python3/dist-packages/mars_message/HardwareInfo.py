"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class HardwareInfo(object):
    __slots__ = ["count", "analog", "digital"]

    __typenames__ = ["int8_t", "int16_t", "int64_t"]

    __dimensions__ = [None, ["count"], None]

    def __init__(self):
        self.count = 0
        self.analog = []
        self.digital = 0

    def encode(self):
        buf = BytesIO()
        buf.write(HardwareInfo._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.count))
        buf.write(struct.pack('>%dh' % self.count, *self.analog[:self.count]))
        buf.write(struct.pack(">q", self.digital))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != HardwareInfo._get_packed_fingerprint():
            raise ValueError("Decode error")
        return HardwareInfo._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = HardwareInfo()
        self.count = struct.unpack(">b", buf.read(1))[0]
        self.analog = struct.unpack('>%dh' % self.count, buf.read(self.count * 2))
        self.digital = struct.unpack(">q", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if HardwareInfo in parents: return 0
        tmphash = (0xd84c5da1958a8e9f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if HardwareInfo._packed_fingerprint is None:
            HardwareInfo._packed_fingerprint = struct.pack(">Q", HardwareInfo._get_hash_recursive([]))
        return HardwareInfo._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", HardwareInfo._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.count = j["count"]
        self.analog = j["analog"]
        self.digital = j["digital"]

    def to_dict(self):
        j = {}
        j["count"] = self.count
        j["analog"] = self.analog
        j["digital"] = self.digital
        return j

