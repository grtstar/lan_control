"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import mars_message.DigitalDesc

import mars_message.AnalogDesc

class HwDesc(object):
    __slots__ = ["analogCount", "adesc", "digitalCount", "ddesc"]

    __typenames__ = ["int8_t", "mars_message.AnalogDesc", "int8_t", "mars_message.DigitalDesc"]

    __dimensions__ = [None, ["analogCount"], None, ["digitalCount"]]

    def __init__(self):
        self.analogCount = 0
        self.adesc = []
        self.digitalCount = 0
        self.ddesc = []

    def encode(self):
        buf = BytesIO()
        buf.write(HwDesc._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.analogCount))
        for i0 in range(self.analogCount):
            assert self.adesc[i0]._get_packed_fingerprint() == mars_message.AnalogDesc._get_packed_fingerprint()
            self.adesc[i0]._encode_one(buf)
        buf.write(struct.pack(">b", self.digitalCount))
        for i0 in range(self.digitalCount):
            assert self.ddesc[i0]._get_packed_fingerprint() == mars_message.DigitalDesc._get_packed_fingerprint()
            self.ddesc[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != HwDesc._get_packed_fingerprint():
            raise ValueError("Decode error")
        return HwDesc._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = HwDesc()
        self.analogCount = struct.unpack(">b", buf.read(1))[0]
        self.adesc = []
        for i0 in range(self.analogCount):
            self.adesc.append(mars_message.AnalogDesc._decode_one(buf))
        self.digitalCount = struct.unpack(">b", buf.read(1))[0]
        self.ddesc = []
        for i0 in range(self.digitalCount):
            self.ddesc.append(mars_message.DigitalDesc._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if HwDesc in parents: return 0
        newparents = parents + [HwDesc]
        tmphash = (0x731ba6fbec8ec2df+ mars_message.AnalogDesc._get_hash_recursive(newparents)+ mars_message.DigitalDesc._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if HwDesc._packed_fingerprint is None:
            HwDesc._packed_fingerprint = struct.pack(">Q", HwDesc._get_hash_recursive([]))
        return HwDesc._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", HwDesc._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.analogCount = j["analogCount"]
        self.adesc = [x.from_dict() for x in j["adesc"]]
        self.digitalCount = j["digitalCount"]
        self.ddesc = [x.from_dict() for x in j["ddesc"]]

    def to_dict(self):
        j = {}
        j["analogCount"] = self.analogCount
        j["adesc"] = [x.to_dict() for x in self.adesc]
        j["digitalCount"] = self.digitalCount
        j["ddesc"] = [x.to_dict() for x in self.ddesc]
        return j

