"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class AnalogDesc(object):
    __slots__ = ["desc", "unit"]

    __typenames__ = ["string", "string"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.desc = ""
        self.unit = ""

    def encode(self):
        buf = BytesIO()
        buf.write(AnalogDesc._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __desc_encoded = self.desc.encode('utf-8')
        buf.write(struct.pack('>I', len(__desc_encoded)+1))
        buf.write(__desc_encoded)
        buf.write(b"\0")
        __unit_encoded = self.unit.encode('utf-8')
        buf.write(struct.pack('>I', len(__unit_encoded)+1))
        buf.write(__unit_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != AnalogDesc._get_packed_fingerprint():
            raise ValueError("Decode error")
        return AnalogDesc._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = AnalogDesc()
        __desc_len = struct.unpack('>I', buf.read(4))[0]
        self.desc = buf.read(__desc_len)[:-1].decode('utf-8', 'replace')
        __unit_len = struct.unpack('>I', buf.read(4))[0]
        self.unit = buf.read(__unit_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if AnalogDesc in parents: return 0
        tmphash = (0x86f055d9d4ffd9b0) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if AnalogDesc._packed_fingerprint is None:
            AnalogDesc._packed_fingerprint = struct.pack(">Q", AnalogDesc._get_hash_recursive([]))
        return AnalogDesc._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", AnalogDesc._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.desc = j["desc"]
        self.unit = j["unit"]

    def to_dict(self):
        j = {}
        j["desc"] = self.desc
        j["unit"] = self.unit
        return j

