"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class IrCode6(object):
    __slots__ = ["timestampMs", "code0", "code1", "code2", "code3", "code4", "code5"]

    __typenames__ = ["int32_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.timestampMs = 0
        self.code0 = 0
        self.code1 = 0
        self.code2 = 0
        self.code3 = 0
        self.code4 = 0
        self.code5 = 0

    def encode(self):
        buf = BytesIO()
        buf.write(IrCode6._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ibbbbbb", self.timestampMs, self.code0, self.code1, self.code2, self.code3, self.code4, self.code5))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != IrCode6._get_packed_fingerprint():
            raise ValueError("Decode error")
        return IrCode6._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = IrCode6()
        self.timestampMs, self.code0, self.code1, self.code2, self.code3, self.code4, self.code5 = struct.unpack(">ibbbbbb", buf.read(10))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if IrCode6 in parents: return 0
        tmphash = (0x6971b92986e49c9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if IrCode6._packed_fingerprint is None:
            IrCode6._packed_fingerprint = struct.pack(">Q", IrCode6._get_hash_recursive([]))
        return IrCode6._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", IrCode6._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.timestampMs = j["timestampMs"]
        self.code0 = j["code0"]
        self.code1 = j["code1"]
        self.code2 = j["code2"]
        self.code3 = j["code3"]
        self.code4 = j["code4"]
        self.code5 = j["code5"]

    def to_dict(self):
        j = {}
        j["timestampMs"] = self.timestampMs
        j["code0"] = self.code0
        j["code1"] = self.code1
        j["code2"] = self.code2
        j["code3"] = self.code3
        j["code4"] = self.code4
        j["code5"] = self.code5
        return j

