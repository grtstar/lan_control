"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class StationCtrl(object):
    __slots__ = ["ledHome", "ledHotFan", "ledClean", "ledMop", "ledErr", "cleanPumpS", "cleanHotWater", "dirToRobotTank", "sewagePumpS", "dustCollectS", "airDryFanS", "airHotFan", "playNumber"]

    __typenames__ = ["int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int16_t", "int8_t", "int8_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.ledHome = 0
        self.ledHotFan = 0
        self.ledClean = 0
        self.ledMop = 0
        self.ledErr = 0
        self.cleanPumpS = 0
        self.cleanHotWater = 0
        self.dirToRobotTank = 0
        self.sewagePumpS = 0
        self.dustCollectS = 0
        self.airDryFanS = 0
        self.airHotFan = 0
        self.playNumber = 0

    def encode(self):
        buf = BytesIO()
        buf.write(StationCtrl._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbbbbbbbbbhbb", self.ledHome, self.ledHotFan, self.ledClean, self.ledMop, self.ledErr, self.cleanPumpS, self.cleanHotWater, self.dirToRobotTank, self.sewagePumpS, self.dustCollectS, self.airDryFanS, self.airHotFan, self.playNumber))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != StationCtrl._get_packed_fingerprint():
            raise ValueError("Decode error")
        return StationCtrl._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = StationCtrl()
        self.ledHome, self.ledHotFan, self.ledClean, self.ledMop, self.ledErr, self.cleanPumpS, self.cleanHotWater, self.dirToRobotTank, self.sewagePumpS, self.dustCollectS, self.airDryFanS, self.airHotFan, self.playNumber = struct.unpack(">bbbbbbbbbbhbb", buf.read(14))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if StationCtrl in parents: return 0
        tmphash = (0xb42ad8398feab258) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if StationCtrl._packed_fingerprint is None:
            StationCtrl._packed_fingerprint = struct.pack(">Q", StationCtrl._get_hash_recursive([]))
        return StationCtrl._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", StationCtrl._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.ledHome = j["ledHome"]
        self.ledHotFan = j["ledHotFan"]
        self.ledClean = j["ledClean"]
        self.ledMop = j["ledMop"]
        self.ledErr = j["ledErr"]
        self.cleanPumpS = j["cleanPumpS"]
        self.cleanHotWater = j["cleanHotWater"]
        self.dirToRobotTank = j["dirToRobotTank"]
        self.sewagePumpS = j["sewagePumpS"]
        self.dustCollectS = j["dustCollectS"]
        self.airDryFanS = j["airDryFanS"]
        self.airHotFan = j["airHotFan"]
        self.playNumber = j["playNumber"]

    def to_dict(self):
        j = {}
        j["ledHome"] = self.ledHome
        j["ledHotFan"] = self.ledHotFan
        j["ledClean"] = self.ledClean
        j["ledMop"] = self.ledMop
        j["ledErr"] = self.ledErr
        j["cleanPumpS"] = self.cleanPumpS
        j["cleanHotWater"] = self.cleanHotWater
        j["dirToRobotTank"] = self.dirToRobotTank
        j["sewagePumpS"] = self.sewagePumpS
        j["dustCollectS"] = self.dustCollectS
        j["airDryFanS"] = self.airDryFanS
        j["airHotFan"] = self.airHotFan
        j["playNumber"] = self.playNumber
        return j

