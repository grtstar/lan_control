"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class CleanInfo(object):
    __slots__ = ["cleanTimeSecond", "cleanTimeTotalMinutes", "cleanArea", "cleanAreaTotal", "cleanCountTotal", "cleanFinishCountTotal", "esimateArea", "carpetArea", "edgeBrushTimeTotalMinutes", "mainBrushTimeTotalMinutes", "haipaTimeTotalMinutes", "ragLifeTimeTotalMinutes", "dustCollectionCountTotal"]

    __typenames__ = ["int64_t", "int64_t", "float", "double", "int64_t", "int64_t", "float", "float", "int64_t", "int64_t", "int64_t", "int64_t", "int64_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.cleanTimeSecond = 0
        self.cleanTimeTotalMinutes = 0
        self.cleanArea = 0.0
        self.cleanAreaTotal = 0.0
        self.cleanCountTotal = 0
        self.cleanFinishCountTotal = 0
        self.esimateArea = 0.0
        self.carpetArea = 0.0
        self.edgeBrushTimeTotalMinutes = 0
        self.mainBrushTimeTotalMinutes = 0
        self.haipaTimeTotalMinutes = 0
        self.ragLifeTimeTotalMinutes = 0
        self.dustCollectionCountTotal = 0

    def encode(self):
        buf = BytesIO()
        buf.write(CleanInfo._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqfdqqffqqqqq", self.cleanTimeSecond, self.cleanTimeTotalMinutes, self.cleanArea, self.cleanAreaTotal, self.cleanCountTotal, self.cleanFinishCountTotal, self.esimateArea, self.carpetArea, self.edgeBrushTimeTotalMinutes, self.mainBrushTimeTotalMinutes, self.haipaTimeTotalMinutes, self.ragLifeTimeTotalMinutes, self.dustCollectionCountTotal))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != CleanInfo._get_packed_fingerprint():
            raise ValueError("Decode error")
        return CleanInfo._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = CleanInfo()
        self.cleanTimeSecond, self.cleanTimeTotalMinutes, self.cleanArea, self.cleanAreaTotal, self.cleanCountTotal, self.cleanFinishCountTotal, self.esimateArea, self.carpetArea, self.edgeBrushTimeTotalMinutes, self.mainBrushTimeTotalMinutes, self.haipaTimeTotalMinutes, self.ragLifeTimeTotalMinutes, self.dustCollectionCountTotal = struct.unpack(">qqfdqqffqqqqq", buf.read(92))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if CleanInfo in parents: return 0
        tmphash = (0x3a3ba1ca0799dfa0) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if CleanInfo._packed_fingerprint is None:
            CleanInfo._packed_fingerprint = struct.pack(">Q", CleanInfo._get_hash_recursive([]))
        return CleanInfo._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", CleanInfo._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.cleanTimeSecond = j["cleanTimeSecond"]
        self.cleanTimeTotalMinutes = j["cleanTimeTotalMinutes"]
        self.cleanArea = j["cleanArea"]
        self.cleanAreaTotal = j["cleanAreaTotal"]
        self.cleanCountTotal = j["cleanCountTotal"]
        self.cleanFinishCountTotal = j["cleanFinishCountTotal"]
        self.esimateArea = j["esimateArea"]
        self.carpetArea = j["carpetArea"]
        self.edgeBrushTimeTotalMinutes = j["edgeBrushTimeTotalMinutes"]
        self.mainBrushTimeTotalMinutes = j["mainBrushTimeTotalMinutes"]
        self.haipaTimeTotalMinutes = j["haipaTimeTotalMinutes"]
        self.ragLifeTimeTotalMinutes = j["ragLifeTimeTotalMinutes"]
        self.dustCollectionCountTotal = j["dustCollectionCountTotal"]

    def to_dict(self):
        j = {}
        j["cleanTimeSecond"] = self.cleanTimeSecond
        j["cleanTimeTotalMinutes"] = self.cleanTimeTotalMinutes
        j["cleanArea"] = self.cleanArea
        j["cleanAreaTotal"] = self.cleanAreaTotal
        j["cleanCountTotal"] = self.cleanCountTotal
        j["cleanFinishCountTotal"] = self.cleanFinishCountTotal
        j["esimateArea"] = self.esimateArea
        j["carpetArea"] = self.carpetArea
        j["edgeBrushTimeTotalMinutes"] = self.edgeBrushTimeTotalMinutes
        j["mainBrushTimeTotalMinutes"] = self.mainBrushTimeTotalMinutes
        j["haipaTimeTotalMinutes"] = self.haipaTimeTotalMinutes
        j["ragLifeTimeTotalMinutes"] = self.ragLifeTimeTotalMinutes
        j["dustCollectionCountTotal"] = self.dustCollectionCountTotal
        return j

