"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class RobotState(object):
    __slots__ = ["switch_go", "pause", "switch_charge", "mode", "status", "clean_time", "clean_area", "battery", "suction", "cistern", "seek", "direction_control", "map_reset", "path_data", "command", "request", "edge_brush_life", "edge_brush_life_reset", "roll_brush_life", "roll_brush_life_reset", "filter_life", "filter_reset", "rag_life", "rag_life_reset", "do_not_disturb", "volume_set", "break_clean", "fault", "clean_area_total", "clean_count_total", "clean_time_total", "deivice_timer", "disturb_time_set", "device_info", "voice_data", "language", "dust_collection_num", "dust_collection_switch", "costomize_mode_switch", "mop_state", "work_mode", "unit_set", "estimate_area", "carpet_clean_prefer", "auto_boost", "cruise_switch", "child_lock", "y_mop", "self_clean", "drying", "self_clean_frequency", "self_clean_strength", "land_strength", "smart_collision", "mop_drying_timee", "base_heat", "base_mop_hot", "smart_along_wall", "log_upload", "extra_count", "extra_dp"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, ["extra_count"]]

    def __init__(self):
        self.switch_go = 0
        self.pause = 0
        self.switch_charge = 0
        self.mode = 0
        self.status = 0
        self.clean_time = 0
        self.clean_area = 0
        self.battery = 0
        self.suction = 0
        self.cistern = 0
        self.seek = 0
        self.direction_control = 0
        self.map_reset = 0
        self.path_data = 0
        self.command = 0
        self.request = 0
        self.edge_brush_life = 0
        self.edge_brush_life_reset = 0
        self.roll_brush_life = 0
        self.roll_brush_life_reset = 0
        self.filter_life = 0
        self.filter_reset = 0
        self.rag_life = 0
        self.rag_life_reset = 0
        self.do_not_disturb = 0
        self.volume_set = 0
        self.break_clean = 0
        self.fault = 0
        self.clean_area_total = 0
        self.clean_count_total = 0
        self.clean_time_total = 0
        self.deivice_timer = 0
        self.disturb_time_set = 0
        self.device_info = 0
        self.voice_data = 0
        self.language = 0
        self.dust_collection_num = 0
        self.dust_collection_switch = 0
        self.costomize_mode_switch = 0
        self.mop_state = 0
        self.work_mode = 0
        self.unit_set = 0
        self.estimate_area = 0
        self.carpet_clean_prefer = 0
        self.auto_boost = 0
        self.cruise_switch = 0
        self.child_lock = 0
        self.y_mop = 0
        self.self_clean = 0
        self.drying = 0
        self.self_clean_frequency = 0
        self.self_clean_strength = 0
        self.land_strength = 0
        self.smart_collision = 0
        self.mop_drying_timee = 0
        self.base_heat = 0
        self.base_mop_hot = 0
        self.smart_along_wall = 0
        self.log_upload = 0
        self.extra_count = 0
        self.extra_dp = []

    def encode(self):
        buf = BytesIO()
        buf.write(RobotState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", self.switch_go, self.pause, self.switch_charge, self.mode, self.status, self.clean_time, self.clean_area, self.battery, self.suction, self.cistern, self.seek, self.direction_control, self.map_reset, self.path_data, self.command, self.request, self.edge_brush_life, self.edge_brush_life_reset, self.roll_brush_life, self.roll_brush_life_reset, self.filter_life, self.filter_reset, self.rag_life, self.rag_life_reset, self.do_not_disturb, self.volume_set, self.break_clean, self.fault, self.clean_area_total, self.clean_count_total, self.clean_time_total, self.deivice_timer, self.disturb_time_set, self.device_info, self.voice_data, self.language, self.dust_collection_num, self.dust_collection_switch, self.costomize_mode_switch, self.mop_state, self.work_mode, self.unit_set, self.estimate_area, self.carpet_clean_prefer, self.auto_boost, self.cruise_switch, self.child_lock, self.y_mop, self.self_clean, self.drying, self.self_clean_frequency, self.self_clean_strength, self.land_strength, self.smart_collision, self.mop_drying_timee, self.base_heat, self.base_mop_hot, self.smart_along_wall, self.log_upload, self.extra_count))
        buf.write(struct.pack('>%di' % self.extra_count, *self.extra_dp[:self.extra_count]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != RobotState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return RobotState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = RobotState()
        self.switch_go, self.pause, self.switch_charge, self.mode, self.status, self.clean_time, self.clean_area, self.battery, self.suction, self.cistern, self.seek, self.direction_control, self.map_reset, self.path_data, self.command, self.request, self.edge_brush_life, self.edge_brush_life_reset, self.roll_brush_life, self.roll_brush_life_reset, self.filter_life, self.filter_reset, self.rag_life, self.rag_life_reset, self.do_not_disturb, self.volume_set, self.break_clean, self.fault, self.clean_area_total, self.clean_count_total, self.clean_time_total, self.deivice_timer, self.disturb_time_set, self.device_info, self.voice_data, self.language, self.dust_collection_num, self.dust_collection_switch, self.costomize_mode_switch, self.mop_state, self.work_mode, self.unit_set, self.estimate_area, self.carpet_clean_prefer, self.auto_boost, self.cruise_switch, self.child_lock, self.y_mop, self.self_clean, self.drying, self.self_clean_frequency, self.self_clean_strength, self.land_strength, self.smart_collision, self.mop_drying_timee, self.base_heat, self.base_mop_hot, self.smart_along_wall, self.log_upload, self.extra_count = struct.unpack(">iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", buf.read(240))
        self.extra_dp = struct.unpack('>%di' % self.extra_count, buf.read(self.extra_count * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if RobotState in parents: return 0
        tmphash = (0x8d91b9ba15941584) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if RobotState._packed_fingerprint is None:
            RobotState._packed_fingerprint = struct.pack(">Q", RobotState._get_hash_recursive([]))
        return RobotState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", RobotState._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.switch_go = j["switch_go"]
        self.pause = j["pause"]
        self.switch_charge = j["switch_charge"]
        self.mode = j["mode"]
        self.status = j["status"]
        self.clean_time = j["clean_time"]
        self.clean_area = j["clean_area"]
        self.battery = j["battery"]
        self.suction = j["suction"]
        self.cistern = j["cistern"]
        self.seek = j["seek"]
        self.direction_control = j["direction_control"]
        self.map_reset = j["map_reset"]
        self.path_data = j["path_data"]
        self.command = j["command"]
        self.request = j["request"]
        self.edge_brush_life = j["edge_brush_life"]
        self.edge_brush_life_reset = j["edge_brush_life_reset"]
        self.roll_brush_life = j["roll_brush_life"]
        self.roll_brush_life_reset = j["roll_brush_life_reset"]
        self.filter_life = j["filter_life"]
        self.filter_reset = j["filter_reset"]
        self.rag_life = j["rag_life"]
        self.rag_life_reset = j["rag_life_reset"]
        self.do_not_disturb = j["do_not_disturb"]
        self.volume_set = j["volume_set"]
        self.break_clean = j["break_clean"]
        self.fault = j["fault"]
        self.clean_area_total = j["clean_area_total"]
        self.clean_count_total = j["clean_count_total"]
        self.clean_time_total = j["clean_time_total"]
        self.deivice_timer = j["deivice_timer"]
        self.disturb_time_set = j["disturb_time_set"]
        self.device_info = j["device_info"]
        self.voice_data = j["voice_data"]
        self.language = j["language"]
        self.dust_collection_num = j["dust_collection_num"]
        self.dust_collection_switch = j["dust_collection_switch"]
        self.costomize_mode_switch = j["costomize_mode_switch"]
        self.mop_state = j["mop_state"]
        self.work_mode = j["work_mode"]
        self.unit_set = j["unit_set"]
        self.estimate_area = j["estimate_area"]
        self.carpet_clean_prefer = j["carpet_clean_prefer"]
        self.auto_boost = j["auto_boost"]
        self.cruise_switch = j["cruise_switch"]
        self.child_lock = j["child_lock"]
        self.y_mop = j["y_mop"]
        self.self_clean = j["self_clean"]
        self.drying = j["drying"]
        self.self_clean_frequency = j["self_clean_frequency"]
        self.self_clean_strength = j["self_clean_strength"]
        self.land_strength = j["land_strength"]
        self.smart_collision = j["smart_collision"]
        self.mop_drying_timee = j["mop_drying_timee"]
        self.base_heat = j["base_heat"]
        self.base_mop_hot = j["base_mop_hot"]
        self.smart_along_wall = j["smart_along_wall"]
        self.log_upload = j["log_upload"]
        self.extra_count = j["extra_count"]
        self.extra_dp = j["extra_dp"]

    def to_dict(self):
        j = {}
        j["switch_go"] = self.switch_go
        j["pause"] = self.pause
        j["switch_charge"] = self.switch_charge
        j["mode"] = self.mode
        j["status"] = self.status
        j["clean_time"] = self.clean_time
        j["clean_area"] = self.clean_area
        j["battery"] = self.battery
        j["suction"] = self.suction
        j["cistern"] = self.cistern
        j["seek"] = self.seek
        j["direction_control"] = self.direction_control
        j["map_reset"] = self.map_reset
        j["path_data"] = self.path_data
        j["command"] = self.command
        j["request"] = self.request
        j["edge_brush_life"] = self.edge_brush_life
        j["edge_brush_life_reset"] = self.edge_brush_life_reset
        j["roll_brush_life"] = self.roll_brush_life
        j["roll_brush_life_reset"] = self.roll_brush_life_reset
        j["filter_life"] = self.filter_life
        j["filter_reset"] = self.filter_reset
        j["rag_life"] = self.rag_life
        j["rag_life_reset"] = self.rag_life_reset
        j["do_not_disturb"] = self.do_not_disturb
        j["volume_set"] = self.volume_set
        j["break_clean"] = self.break_clean
        j["fault"] = self.fault
        j["clean_area_total"] = self.clean_area_total
        j["clean_count_total"] = self.clean_count_total
        j["clean_time_total"] = self.clean_time_total
        j["deivice_timer"] = self.deivice_timer
        j["disturb_time_set"] = self.disturb_time_set
        j["device_info"] = self.device_info
        j["voice_data"] = self.voice_data
        j["language"] = self.language
        j["dust_collection_num"] = self.dust_collection_num
        j["dust_collection_switch"] = self.dust_collection_switch
        j["costomize_mode_switch"] = self.costomize_mode_switch
        j["mop_state"] = self.mop_state
        j["work_mode"] = self.work_mode
        j["unit_set"] = self.unit_set
        j["estimate_area"] = self.estimate_area
        j["carpet_clean_prefer"] = self.carpet_clean_prefer
        j["auto_boost"] = self.auto_boost
        j["cruise_switch"] = self.cruise_switch
        j["child_lock"] = self.child_lock
        j["y_mop"] = self.y_mop
        j["self_clean"] = self.self_clean
        j["drying"] = self.drying
        j["self_clean_frequency"] = self.self_clean_frequency
        j["self_clean_strength"] = self.self_clean_strength
        j["land_strength"] = self.land_strength
        j["smart_collision"] = self.smart_collision
        j["mop_drying_timee"] = self.mop_drying_timee
        j["base_heat"] = self.base_heat
        j["base_mop_hot"] = self.base_mop_hot
        j["smart_along_wall"] = self.smart_along_wall
        j["log_upload"] = self.log_upload
        j["extra_count"] = self.extra_count
        j["extra_dp"] = self.extra_dp
        return j

