// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by lcm-gen

#ifndef _mars_message_StationMsg_h
#define _mars_message_StationMsg_h

#include <stdint.h>
#include <stdlib.h>
#include <lcm/lcm_coretypes.h>
#include <lcm/lcm.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct _mars_message_StationMsg mars_message_StationMsg;
struct _mars_message_StationMsg
{
    int8_t     packNum;
    /// 循环增加
    int8_t     dataLen;
    /// _00~_xx 的数据长度和 uint8_t 
    int8_t     _00packType;
    /// 包类型	1=定时上报 2=指令下发 3=配对模式
    int8_t     _01workMode;
    /// 工作模式
    int8_t     _02install;
    /**
     * 传感器状态(0=错误，1=正常) bit0：尘袋安装 1：清水箱在位 2：清水箱有水 3：污水箱在位
     * 							 bit4：污水箱满 5：尘袋满     6：水槽水满   7：上下水在位
     */
    int8_t     _03install;
    /**
     * 传感器状态(0=错误，1=正常) bit0：充电在位 1：水槽刮盘   2：清水泵工作 3：污水泵工作
     * 							 bit4：注水方向 5：集尘状态   6：吹风状态   7：热风打开
     */
    int8_t     _04install;
    /**
     * 传感器状态(0=错误，1=正常) bit0：热水打开 1：清洁液注射 2：UV工作     3：/
     * 							 bit4：/ 5：/   6：/   7：/
     */
    int8_t     _05keyType;
    /**
     * 0=无触发 1-3:HOME 短按 双击 长按  4-5 ：HOT   短按 双击 长按
     * 		   6-8:PLAY 短按 双击 长按  9-11：CLEAN 短按 双击 长按
     */
    int8_t     _06keyType;
    /**
     * 0=无触发 1-3:HOME 短按 双击 长按  4-5 ：HOT   短按 双击 长按
     * 		   6-8:PLAY 短按 双击 长按  9-11：CLEAN 短按 双击 长按
     */
    int8_t     _07keyType;
    /**
     * 0=无触发 1-3:HOME 短按 双击 长按  4-5 ：HOT   短按 双击 长按
     * 		   6-8:PLAY 短按 双击 长按  9-11：CLEAN 短按 双击 长按
     */
    int8_t     _08keyType;
    /**
     * 0=无触发 1-3:HOME 短按 双击 长按  4-5 ：HOT   短按 双击 长按
     * 		   6-8:PLAY 短按 双击 长按  9-11：CLEAN 短按 双击 长按
     */
    int8_t     _09LED0;
    /// HOME 0=托管   1=亮  2=灭
    int8_t     _10LED1;
    /// HOT  0=托管   1=亮  2=灭
    int8_t     _11LED2;
    /// PLAY 0=托管   1=亮  2=灭
    int8_t     _12LED3;
    /// CLEAN0=托管   1=亮  2=灭
    int8_t     _13randNum;
    /// 频率相关
    int8_t     _14randChl;
    /// 通道相关
    int8_t     _15version;
};

/**
 * Create a deep copy of a mars_message_StationMsg.
 * When no longer needed, destroy it with mars_message_StationMsg_destroy()
 */
mars_message_StationMsg* mars_message_StationMsg_copy(const mars_message_StationMsg* to_copy);

/**
 * Destroy an instance of mars_message_StationMsg created by mars_message_StationMsg_copy()
 */
void mars_message_StationMsg_destroy(mars_message_StationMsg* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _mars_message_StationMsg_subscription_t mars_message_StationMsg_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * mars_message_StationMsg is received.
 */
typedef void(*mars_message_StationMsg_handler_t)(
    const lcm_recv_buf_t *rbuf, const char *channel,
    const mars_message_StationMsg *msg, void *userdata);

/**
 * Publish a message of type mars_message_StationMsg using LCM.
 *
 * @param lcm The LCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means LCM has transferred
 * responsibility of the message data to the OS.
 */
int mars_message_StationMsg_publish(lcm_t *lcm, const char *channel, const mars_message_StationMsg *msg);

/**
 * Subscribe to messages of type mars_message_StationMsg using LCM.
 *
 * @param lcm The LCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by LCM when a message is
 *     received. This function is invoked by LCM during calls to lcm_handle()
 *     and lcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return 0 on success, <0 if an error occured
 */
mars_message_StationMsg_subscription_t* mars_message_StationMsg_subscribe(
    lcm_t *lcm, const char *channel, mars_message_StationMsg_handler_t handler, void *userdata);

/**
 * Removes and destroys a subscription created by mars_message_StationMsg_subscribe()
 */
int mars_message_StationMsg_unsubscribe(lcm_t *lcm, mars_message_StationMsg_subscription_t* hid);

/**
 * Sets the queue capacity for a subscription.
 * Some LCM providers (e.g., the default multicast provider) are implemented
 * using a background receive thread that constantly revceives messages from
 * the network.  As these messages are received, they are buffered on
 * per-subscription queues until dispatched by lcm_handle().  This function
 * how many messages are queued before dropping messages.
 *
 * @param subs the subscription to modify.
 * @param num_messages The maximum number of messages to queue
 *  on the subscription.
 * @return 0 on success, <0 if an error occured
 */
int mars_message_StationMsg_subscription_set_queue_capacity(
    mars_message_StationMsg_subscription_t* subs, int num_messages);

/**
 * Encode a message of type mars_message_StationMsg into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to mars_message_StationMsg_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int mars_message_StationMsg_encode(void *buf, int offset, int maxlen, const mars_message_StationMsg *p);

/**
 * Decode a message of type mars_message_StationMsg from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with mars_message_StationMsg_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int mars_message_StationMsg_decode(const void *buf, int offset, int maxlen, mars_message_StationMsg *msg);

/**
 * Release resources allocated by mars_message_StationMsg_decode()
 * @return 0
 */
int mars_message_StationMsg_decode_cleanup(mars_message_StationMsg *p);

/**
 * Check how many bytes are required to encode a message of type mars_message_StationMsg
 */
int mars_message_StationMsg_encoded_size(const mars_message_StationMsg *p);

// LCM support functions. Users should not call these
int64_t __mars_message_StationMsg_get_hash(void);
uint64_t __mars_message_StationMsg_hash_recursive(const __lcm_hash_ptr *p);
int __mars_message_StationMsg_encode_array(
    void *buf, int offset, int maxlen, const mars_message_StationMsg *p, int elements);
int __mars_message_StationMsg_decode_array(
    const void *buf, int offset, int maxlen, mars_message_StationMsg *p, int elements);
int __mars_message_StationMsg_decode_array_cleanup(mars_message_StationMsg *p, int elements);
int __mars_message_StationMsg_encoded_array_size(const mars_message_StationMsg *p, int elements);
int __mars_message_StationMsg_clone_array(const mars_message_StationMsg *p, mars_message_StationMsg *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
