/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __mars_message_StationMsg_hpp__
#define __mars_message_StationMsg_hpp__

#include <lcm/lcm_coretypes.h>


namespace mars_message
{

class StationMsg
{
    public:
        int8_t     packNum;

        /// 循环增加
        int8_t     dataLen;

        /// _00~_xx 的数据长度和 uint8_t 
        int8_t     _00packType;

        /// 包类型	1=定时上报 2=指令下发 3=配对模式
        int8_t     _01workMode;

        /// 工作模式
        int8_t     _02install;

        /**
         * 传感器状态(0=错误，1=正常) bit0：尘袋安装 1：清水箱在位 2：清水箱有水 3：污水箱在位
         * 							 bit4：污水箱满 5：尘袋满     6：水槽水满   7：上下水在位
         */
        int8_t     _03install;

        /**
         * 传感器状态(0=错误，1=正常) bit0：充电在位 1：水槽刮盘   2：清水泵工作 3：污水泵工作
         * 							 bit4：注水方向 5：集尘状态   6：吹风状态   7：热风打开
         */
        int8_t     _04install;

        /**
         * 传感器状态(0=错误，1=正常) bit0：热水打开 1：清洁液注射 2：UV工作     3：/
         * 							 bit4：/ 5：/   6：/   7：/
         */
        int8_t     _05keyType;

        /**
         * 0=无触发 1-3:HOME 短按 双击 长按  4-5 ：HOT   短按 双击 长按
         * 		   6-8:PLAY 短按 双击 长按  9-11：CLEAN 短按 双击 长按
         */
        int8_t     _06keyType;

        /**
         * 0=无触发 1-3:HOME 短按 双击 长按  4-5 ：HOT   短按 双击 长按
         * 		   6-8:PLAY 短按 双击 长按  9-11：CLEAN 短按 双击 长按
         */
        int8_t     _07keyType;

        /**
         * 0=无触发 1-3:HOME 短按 双击 长按  4-5 ：HOT   短按 双击 长按
         * 		   6-8:PLAY 短按 双击 长按  9-11：CLEAN 短按 双击 长按
         */
        int8_t     _08keyType;

        /**
         * 0=无触发 1-3:HOME 短按 双击 长按  4-5 ：HOT   短按 双击 长按
         * 		   6-8:PLAY 短按 双击 长按  9-11：CLEAN 短按 双击 长按
         */
        int8_t     _09LED0;

        /// HOME 0=托管   1=亮  2=灭
        int8_t     _10LED1;

        /// HOT  0=托管   1=亮  2=灭
        int8_t     _11LED2;

        /// PLAY 0=托管   1=亮  2=灭
        int8_t     _12LED3;

        /// CLEAN0=托管   1=亮  2=灭
        int8_t     _13randNum;

        /// 频率相关
        int8_t     _14randChl;

        /// 通道相关
        int8_t     _15version;

#ifdef __NLOHMANN_JSON_CPP
    public:
        NLOHMANN_DEFINE_TYPE_INTRUSIVE(StationMsg, packNum, dataLen, _00packType, _01workMode, _02install, _03install, _04install, _05keyType, _06keyType, _07keyType, _08keyType, _09LED0, _10LED1, _11LED2, _12LED3, _13randNum, _14randChl, _15version)
#endif
#ifdef __MSGPACK
    public:
        MSGPACK_DEFINE(StationMsg, packNum, dataLen, _00packType, _01workMode, _02install, _03install, _04install, _05keyType, _06keyType, _07keyType, _08keyType, _09LED0, _10LED1, _11LED2, _12LED3, _13randNum, _14randChl, _15version)
#endif
    public:
        bool operator==(const StationMsg& other) const
        {
            return packNum == other.packNum && dataLen == other.dataLen && _00packType == other._00packType && _01workMode == other._01workMode && _02install == other._02install && _03install == other._03install && _04install == other._04install && _05keyType == other._05keyType && _06keyType == other._06keyType && _07keyType == other._07keyType && _08keyType == other._08keyType && _09LED0 == other._09LED0 && _10LED1 == other._10LED1 && _11LED2 == other._11LED2 && _12LED3 == other._12LED3 && _13randNum == other._13randNum && _14randChl == other._14randChl && _15version == other._15version;
        }
    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "StationMsg"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int StationMsg::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int StationMsg::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int StationMsg::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t StationMsg::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* StationMsg::getTypeName()
{
    return "StationMsg";
}

int StationMsg::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->packNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->dataLen, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_00packType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_01workMode, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_02install, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_03install, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_04install, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_05keyType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_06keyType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_07keyType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_08keyType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_09LED0, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_10LED1, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_11LED2, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_12LED3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_13randNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_14randChl, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->_15version, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int StationMsg::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->packNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->dataLen, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_00packType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_01workMode, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_02install, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_03install, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_04install, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_05keyType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_06keyType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_07keyType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_08keyType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_09LED0, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_10LED1, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_11LED2, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_12LED3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_13randNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_14randChl, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->_15version, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int StationMsg::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t StationMsg::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0x10a69d5cee7b065bLL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
